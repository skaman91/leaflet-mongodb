// import { FETCH_URL } from './auth/data.mjs'
const map = L.map('map').setView([60.024828, 30.338195], 10)
document.getElementById('msg').innerHTML = '–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ—á–∫–∏...'

//osm Layer
const OSM = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '<b>Liteoffroad "–ó–∞—Å—Ç—Ä—è–Ω—å –¥—Ä—É–≥–∞"</b>'
})
OSM.addTo(map)

// OSM layer
const cyclOSM = L.tileLayer('https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png', {
  attribution: '<b>Liteoffroad "–ó–∞—Å—Ç—Ä—è–Ω—å –¥—Ä—É–≥–∞"</b>'
})

//google2 Layer
const googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
  subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
  attribution: '<b>Liteoffroad "–ó–∞—Å—Ç—Ä—è–Ω—å –¥—Ä—É–≥–∞"</b>'
})

//layer Controls
const baseLayers = {
  'OpenStreetMap': OSM,
  'OSM': cyclOSM,
  'Google maps': googleSat
}

L.control.layers(baseLayers).addTo(map)

const locateControl = L.control.locate({
  position: 'topright', // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
  setView: true,        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
  drawCircle: true,     // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–µ–æ–ª–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
  follow: true,         // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  locateOptions: {      // –û–ø—Ü–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    enableHighAccuracy: true, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    watch: true,             // –í–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–∂–µ–Ω–∏–µ
    maximumAge: 0            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  }
}).addTo(map)

map.whenReady(() => {
  locateControl.start(); // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
function moveToLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      position => {
        const userLat = position.coords.latitude;
        const userLng = position.coords.longitude;
        map.setView([userLat, userLng], 15); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –∏ –∑–∞–¥–∞–µ–º –∑—É–º
      },
      error => {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ', error.message);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
      },
      { enableHighAccuracy: true } // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
    );
  } else {
    alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.');
  }
}

// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–Ω–æ–ø–∫—É
const customControl = L.Control.extend({
  options: {
    position: 'topright' // –ü–æ–∑–∏—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
  },
  onAdd: function (map) {
    const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

    container.style.backgroundColor = 'white';
    container.style.width = '30px';
    container.style.height = '30px';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.cursor = 'pointer';
    container.title = '–ú–æ—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è';

    container.innerHTML = '<i style="font-size:18px;">üìç</i>'; // –ò–∫–æ–Ω–∫–∞ –∫–Ω–æ–ø–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å)

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    container.onclick = moveToLocation;

    return container;
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
map.addControl(new customControl());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
function playSound () {
  const audio = new Audio('./sound_30.mp3')

  audio.play().then(() => {
    console.log('–ó–≤—É–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω')
  }).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∑–≤—É–∫–∞:', error)
  })
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–¥–∏—É—Å–µ 30 –º–µ—Ç—Ä–æ–≤ –æ—Ç —Ç–æ—á–∫–∏
function isWithinRadius (userLat, userLng, markerLat, markerLng, radiusInMeters) {
  const earthRadius = 6371000 // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const dLat = (markerLat - userLat) * Math.PI / 180
  const dLng = (markerLng - userLng) * Math.PI / 180

  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(userLat * Math.PI / 180) * Math.cos(markerLat * Math.PI / 180) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2)

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
  const distance = earthRadius * c

  return distance <= radiusInMeters
}

const markers = [] // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
const playedSounds = new Set() // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞

await fetch('https://point-map.ru/points')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok ' + response.statusText)
    }
    return response.json()
  })
  .then(data => {
    //Markers
    for (const point of data) {
      const rawCoorditares = point.coordinates.split(',')
      const name = point.name
      const circleText = name.split(' ')[1]

      const marker = new L.Marker.SVGMarker([rawCoorditares[0], rawCoorditares[1]], {
        iconOptions: {
          color: 'rgb(84,84,243)',
          circleText: circleText,
          circleRatio: 0.65,
          fontSize: 10,
          fontWeight: 800
        }
      })

      marker.addTo(map)
      markers.push(marker) // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –º–∞—Å—Å–∏–≤

      const label = `<b>${name}<br>${rawCoorditares}<br>–†–µ–π—Ç–∏–Ω–≥ —Ç–æ—á–∫–∏: ${point.rating}<br>–¢–æ—á–∫—É —É—Å—Ç–∞–Ω–æ–≤–∏–ª: ${point.installed}</b><br>${point.comment}`
      const popup = marker.bindPopup(label)
      popup.addTo(map)
      document.getElementById('msg').innerHTML = ''
    }
    // locateUser()
  })
  .catch(error => {
    console.error('There was a problem with the fetch operation:', error)
    document.getElementById('msg').innerHTML = '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
  })

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
document.getElementById('playSoundButton').addEventListener('click', () => {
  playSound() // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
})
