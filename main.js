// import { FETCH_URL } from './auth/data.mjs'
const map = L.map('map').setView([60.024828, 30.338195], 10)
document.getElementById('msg').innerHTML = '–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ—á–∫–∏...'
let historyMarkers = []
let archivePoints = []
let buttonsContainer

//osm Layer
const OSM = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '<b>Liteoffroad "–ó–∞—Å—Ç—Ä—è–Ω—å –¥—Ä—É–≥–∞"</b>'
})
OSM.addTo(map)

//google2 Layer
const googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
  subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
  attribution: '<b>Liteoffroad "–ó–∞—Å—Ç—Ä—è–Ω—å –¥—Ä—É–≥–∞"</b>'
})

//layer Controls
const baseLayers = {
  'OpenStreetMap': OSM,
  'Google maps': googleSat
}

L.control.layers(baseLayers).addTo(map)

setTimeout(() => {
  const layersList = document.querySelector('.leaflet-control-layers-list')

  if (layersList) {
    function createButton (text, className, onClick) {
      const button = document.createElement('button')
      button.textContent = text
      button.className = className
      button.addEventListener('click', onClick)
      return button
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    function showHistory () {
      clearMarkers()
      getHistoryPoints()
      showHistoryButton.style.display = 'none'
      clearHistoryButton.style.display = 'flex'
      historyButton.style.display = 'flex'
    }

    function clearHistory () {
      clearMarkers()
      clearHistoryButton.style.display = 'none'
      showHistoryButton.style.display = 'flex'
      historyButton.style.display = 'none'
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GPX
    function downloadGPXFile (filename, pointsData) {
      const gpxContent = generateGPX(pointsData)
      downloadGPX(filename, gpxContent)
    }

    // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å GPX –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫"
    const gpxActualButton = createButton('–°–∫–∞—á–∞—Ç—å GPX –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫', 'main-menu-buttons', () => {
      downloadGPXFile('points.gpx', activePoint)
    })

    // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏"
    const historyButton = createButton('–°–∫–∞—á–∞—Ç—å GPX –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–æ—á–µ–∫', 'main-menu-buttons', () => {
      downloadGPXFile('points.gpx', historyMarkers)
    })

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
    const showHistoryButton = createButton('–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'main-menu-buttons', showHistory)

    // –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é" (—Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const clearHistoryButton = createButton('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'main-menu-buttons', clearHistory)
    clearHistoryButton.style.display = 'none'

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ—ë–≤
    layersList.appendChild(showHistoryButton)
    layersList.appendChild(clearHistoryButton)
    layersList.appendChild(historyButton)
    layersList.appendChild(gpxActualButton)
  }
}, 100)

const locateControl = L.control.locate({
  position: 'topright', // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
  flyTo: true,
  keepCurrentZoomLevel: true,
  setView: true,        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
  drawCircle: true,     // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–µ–æ–ª–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
  follow: true,         // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  locateOptions: {      // –û–ø—Ü–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    enableHighAccuracy: true, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    watch: true,             // –í–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–∂–µ–Ω–∏–µ
    maximumAge: 0            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  }
}).addTo(map)

map.whenReady(() => {
  locateControl.start() // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
})

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É
const ButtonsControl = L.Control.extend({
  options: {
    position: 'bottomleft'
  },

  onAdd: function (map) {
    buttonsContainer = L.DomUtil.create('div')

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
    const showButton = L.DomUtil.create('button', 'custom-button', buttonsContainer)
    showButton.innerHTML = '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é'
    showButton.id = 'showButton'
    L.DomEvent.on(showButton, 'click', getHistoryPoints)

    // –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é" (—Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const clearButton = L.DomUtil.create('button', 'custom-button', buttonsContainer)
    clearButton.innerHTML = '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é'
    clearButton.id = 'clearButton'
    clearButton.style.display = 'none'
    L.DomEvent.on(clearButton, 'click', clearMarkers)

    return buttonsContainer
  }
})

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—É
map.addControl(new ButtonsControl())

new L.GPX('./lib/50km-area.gpx', {
  async: true,
  polyline_options: { color: 'red', weight: 3, opacity: 0.9 },
  marker_options: {
    startIconUrl: '',
    endIconUrl: '',
    wptIconUrls: {}
  },
  get_marker: function () { return null }
}).addTo(map)

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
function clearMarkers () {
  historyMarkers.forEach(marker => map.removeLayer(marker))
  historyMarkers = []

  toggleButtons() // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
function toggleButtons () {
  const showButton = document.getElementById('showButton')
  const clearButton = document.getElementById('clearButton')

  if (historyMarkers.length > 0) {
    showButton.style.display = 'none'
    clearButton.style.display = 'inline-block'
  } else {
    showButton.style.display = 'inline-block'
    clearButton.style.display = 'none'
    document.querySelectorAll('#downloadHistoryGPX').forEach(button => button.remove())
  }
}

let firstPoint = null
let secondPoint = null
let line = null
let distanceLabel = null
let measuringMode = false // –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ª–∏–Ω–µ–π–∫–∏

// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
const measureControl = L.control({ position: 'topleft' })
measureControl.onAdd = function (map) {
  const button = L.DomUtil.create('div', 'leaflet-control-measure')
  button.innerHTML = 'üìê'

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
  L.DomEvent.on(button, 'click', function (e) {
    L.DomEvent.stopPropagation(e) // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    measuringMode = !measuringMode
    button.classList.toggle('active', measuringMode)
    resetMeasurement() // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
  })

  return button
}
measureControl.addTo(map)

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
function handleMeasurement (e) {
  if (!measuringMode) return

  if (!firstPoint) {
    // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ ‚Äì —Ä–∏—Å—É–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É (–º–∞–ª–µ–Ω—å–∫–∏–π –∫—Ä—É–∂–æ–∫)
    firstPoint = L.circleMarker(e.latlng, { radius: 4, color: 'black' }).addTo(map)
  } else if (!secondPoint) {
    // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ ‚Äì —Ä–∏—Å—É–µ–º –≤—Ç–æ—Ä—É—é —Ç–æ—á–∫—É –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–µ–π
    secondPoint = L.circleMarker(e.latlng, { radius: 4, color: 'black' }).addTo(map)
    line = L.polyline([firstPoint.getLatLng(), secondPoint.getLatLng()], {
      color: 'black',
      dashArray: '8, 5'
    }).addTo(map)

    let distance = map.distance(firstPoint.getLatLng(), secondPoint.getLatLng()) / 1000 // –≤ –∫–º

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
    distanceLabel = L.divIcon({
      className: 'distance-label',
      html: distance.toFixed(2) + ' –∫–º',
      iconSize: [60, 20]
    })

    L.marker(line.getCenter(), { icon: distanceLabel }).addTo(map)
  } else {
    resetMeasurement()
  }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –≤—Å–µ–π –∫–∞—Ä—Ç–µ (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞)
map.on('click', handleMeasurement)

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
function addMeasurementToMarker (marker) {
  marker.on('click', function (e) {
    handleMeasurement(e) // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ª–∏–Ω–µ–π–∫–∏
    setTimeout(() => e.target.openPopup(), 10) // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  })
}

// –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
map.eachLayer(layer => {
  if (layer instanceof L.Marker) {
    addMeasurementToMarker(layer)
  }
})

// –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–µ
map.on('layeradd', function (e) {
  if (e.layer instanceof L.Marker) {
    addMeasurementToMarker(e.layer)
  }
})

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π –ª–∏–Ω–µ–π–∫–∏
function resetMeasurement () {
  if (firstPoint) map.removeLayer(firstPoint)
  if (secondPoint) map.removeLayer(secondPoint)
  if (line) map.removeLayer(line)
  if (distanceLabel) map.eachLayer(layer => {
    if (layer instanceof L.Marker && layer.options.icon === distanceLabel) {
      map.removeLayer(layer)
    }
  })

  firstPoint = secondPoint = line = distanceLabel = null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
function playSound () {
  const audio = new Audio('./sound_30.mp3')

  audio.play().then(() => {
    console.log('–ó–≤—É–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω')
  }).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∑–≤—É–∫–∞:', error)
  })
}

const markers = [] // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
const playedSounds = new Set() // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞

await fetch('https://point-map.ru/points')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok ' + response.statusText)
    }
    return response.json()
  })
  .then(data => {
    let pointsArray = []
    let circles = {}

    for (const point of data) {
      if (['—Ç–æ—á–∫—É —É–∫—Ä–∞–ª–∏', '—Ç–µ—Å—Ç–æ–≤–∞—è', '–ù–æ–≤–∞—è —Ç–æ—á–∫–∞, –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∞—Å—å'].includes(point.comment)) {
        continue
      }
      if (point.coordinates === ',') {
        continue
      }

      const rawCoordinates = point.coordinates.split(',')
      const lat = parseFloat(rawCoordinates[0])
      const lon = parseFloat(rawCoordinates[1])
      if (isNaN(lat) || isNaN(lon)) continue // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

      const name = point.name
      const circleText = name.split(' ')[1]
      const comment = point.comment

      pointsArray.push({ lat, lon, name, comment })

      const marker = new L.Marker.SVGMarker([lat, lon], {
        iconOptions: {
          color: setRangColor(point.rang),
          circleText: circleText,
          circleRatio: 0.65,
          fontSize: 10,
          fontWeight: 800
        }
      })

      marker.addTo(map)
      markers.push(marker)

      const popupContent = `
        <b>${name}</b><br>
        –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat}, ${lon}<br>
        –†–µ–π—Ç–∏–Ω–≥ —Ç–æ—á–∫–∏: ${point.rating}<br>
        –¢–æ—á–∫—É —É—Å—Ç–∞–Ω–æ–≤–∏–ª: ${point.installed}<br>
        ${point.comment}<br>
        <button class="one-gpx-download" data-lat="${lat}" data-lon="${lon}" data-name="${name}" data-comment="${point.comment}">
            –°–∫–∞—á–∞—Ç—å GPX —Ñ–∞–π–ª —ç—Ç–æ–π —Ç–æ—á–∫–∏
        </button><br>
        <label><input type="checkbox" class="show-circle" data-lat="${lat}" data-lon="${lon}">–ü–æ–∫–∞–∑–∞—Ç—å –∑–æ–Ω—É 5 –∫–º</label>
      `
      marker.bindPopup(popupContent)

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–∞
      marker.on('popupopen', function (e) {
        setTimeout(() => {
          const popupEl = e.popup._contentNode
          if (!popupEl) return

          const checkbox = popupEl.querySelector('.show-circle')
          if (!checkbox) return

          const key = `${lat},${lon}`
          checkbox.checked = !!circles[key]

          checkbox.addEventListener('change', function () {
            if (checkbox.checked) {
              if (!circles[key]) {
                circles[key] = L.circle([lat, lon], {
                  radius: 5000,
                  color: 'green',
                  fillColor: 'blue',
                  fillOpacity: 0.1
                }).addTo(map)
              }
            } else {
              if (circles[key]) {
                map.removeLayer(circles[key])
                delete circles[key]
              }
            }
          })
        }, 100)
      })
    }

    addGPXControl(pointsArray, 'actual')
    document.getElementById('msg').innerHTML = ''

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å GPX"
    document.addEventListener('click', function (event) {
      if (event.target.classList.contains('one-gpx-download')) {
        const lat = event.target.dataset.lat
        const lon = event.target.dataset.lon
        const name = event.target.dataset.name
        const comment = event.target.dataset.comment

        downloadOnePointGPX(lat, lon, name, comment)
      }
    })

  })
  .catch(error => {
    console.error('There was a problem with the fetch operation:', error)
    document.getElementById('msg').innerHTML = '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
  })

map.on('popupopen', function (e) {
  const button = e.popup._contentNode.querySelector('.one-gpx-download')
  if (button) {
    button.addEventListener('click', function () {
      const lat = this.getAttribute('data-lat')
      const lon = this.getAttribute('data-lon')
      const name = this.getAttribute('data-name')
      const comment = this.getAttribute('data-comment')
      const gpxContent = generateGPX([{ lat, lon, name, comment }])
      console.log('gpxContent', gpxContent)
      downloadGPX(`${name}.gpx`, gpxContent)
    })
  }
})

function addGPXControl (points, status) {
  if (status === 'actual') {
    const gpxControl = L.control({ position: 'bottomleft' }) // –ö–Ω–æ–ø–∫–∞ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É

    gpxControl.onAdd = function () {
      const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom')
      div.innerHTML = '<button id="downloadGPX" class="gpx-button downloadGPX">–°–∫–∞—á–∞—Ç—å GPX –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫</button>'

      L.DomEvent.on(div, 'mousedown dblclick', L.DomEvent.stopPropagation)
        .on(div, 'click', function () {
          const gpxContent = generateGPX(points)
          const date = new Date()
          const formattedDate = `${String(date.getFullYear()).slice(2)}${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')}-${String(date.getHours()).padStart(2, '0')}${String(date.getMinutes()).padStart(2, '0')}`

          downloadGPX(`points-${formattedDate}.gpx`, gpxContent)
        })

      return div
    }

    gpxControl.addTo(map)
  } else {
    const historygGpxControl = L.control({ position: 'bottomleft' }) // –ö–Ω–æ–ø–∫–∞ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É

    historygGpxControl.onAdd = function () {
      const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom')
      div.innerHTML = '<button id="downloadHistoryGPX" class="gpx-button downloadGPX">–°–∫–∞—á–∞—Ç—å GPX –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–æ—á–µ–∫</button>'

      L.DomEvent.on(div, 'mousedown dblclick', L.DomEvent.stopPropagation)
        .on(div, 'click', function () {
          const gpxContent = generateGPX(points)
          const date = new Date()
          const formattedDate = `${String(date.getFullYear()).slice(2)}${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')}-${String(date.getHours()).padStart(2, '0')}${String(date.getMinutes()).padStart(2, '0')}`

          downloadGPX(`history-points-${formattedDate}.gpx`, gpxContent)
        })

      return div
    }

    historygGpxControl.addTo(map)
  }
}

function generateGPX (points) {
  let gpx = `<?xml version="1.0" encoding="UTF-8"?>
<gpx version="1.1" creator="PointMapBot" xmlns="http://www.topografix.com/GPX/1/1">
`

  points.forEach(point => {
    gpx += `  <wpt lat="${point.lat}" lon="${point.lon}">
    <name>${point.name}</name>
    <desc>${point.comment}</desc>
  </wpt>\n`
  })

  gpx += `</gpx>`

  return gpx
}

function downloadGPX (filename, gpxContent) {
  const blob = new Blob([gpxContent], { type: 'application/gpx+xml' })
  const link = document.createElement('a')
  link.href = URL.createObjectURL(blob)
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

function downloadOnePointGPX (lat, lon, name, comment) {
  const gpxData = `<?xml version="1.0" encoding="UTF-8"?>
  <gpx version="1.1" creator="PointMap">
    <wpt lat="${lat}" lon="${lon}">
      <name>${name}</name>
      <desc>${comment}</desc>
    </wpt>
  </gpx>`

  const blob = new Blob([gpxData], { type: 'application/gpx+xml' })
  const a = document.createElement('a')
  a.href = URL.createObjectURL(blob)
  a.download = `${name}.gpx`
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
}

async function getHistoryPoints () {
  let archivePoints = []
  let circles = {}
  document.getElementById('msg').innerHTML = '–ó–∞–≥—Ä—É–∂–∞—é –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏...'
  await fetch('https://point-map.ru/pointsHistory')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok ' + response.statusText)
      }
      return response.json()
    })
    .then(data => {
      //History Markers
      for (const point of data) {
        if (/^(—Ç–æ—á–∫—É —É–∫—Ä–∞–ª–∏|—Ç–µ—Å—Ç–æ–≤–∞—è|—Ç–µ—Å—Ç)$/i.test(point.comment)) {
          continue
        }
        if (point.name === '–¢–æ—á–∫–∞ 88') {
          continue
        }
        const coordinatesField = /^(\d\d\.\d{4,}, \d\d\.\d{4,})$/i.test(point.coordinates)
        if (!coordinatesField) {
          continue
        }
        const rawCoorditares = point.coordinates.split(',')
        const lat = parseFloat(rawCoorditares[0])
        const lon = parseFloat(rawCoorditares[1])

        if (isNaN(lat) || isNaN(lon)) continue

        const name = point.name
        const comment = point.comment
        const circleText = name.split(' ')[1]

        archivePoints.push({ lat, lon, name, comment })
        const marker = new L.Marker.SVGMarker([lat, lon], {
          iconOptions: {
            color: 'rgb(0,0,0)',
            circleText: circleText,
            circleRatio: 0.65,
            fontSize: 10,
            fontWeight: 800
          }
        })
        historyMarkers.push(marker)

        marker.addTo(map)
        markers.push(marker)

        const label = `
    <b>${name}<br>${rawCoorditares}<br>
    –†–µ–π—Ç–∏–Ω–≥ —Ç–æ—á–∫–∏: ${point.rating}<br>
    –¢–æ—á–∫—É —É—Å—Ç–∞–Ω–æ–≤–∏–ª: ${point.installed}</b><br>
    ${point.comment}<br>
    <button class="one-gpx-download" data-lat="${lat}" data-lon="${lon}" data-name="${name}" data-comment="${point.comment}">
        –°–∫–∞—á–∞—Ç—å GPX —Ñ–∞–π–ª —ç—Ç–æ–π —Ç–æ—á–∫–∏
    </button><br>
    <label><input type="checkbox" class="show-circle" data-lat="${lat}" data-lon="${lon}">–ü–æ–∫–∞–∑–∞—Ç—å –∑–æ–Ω—É 5 –∫–º</label>
`
        const popup = marker.bindPopup(label)
        // popup.addTo(map)
        marker.on('popupopen', function (e) {
          setTimeout(() => {
            const popupEl = e.popup._contentNode
            if (!popupEl) return

            const checkbox = popupEl.querySelector('.show-circle')
            if (!checkbox) return

            const key = `${lat},${lon}`
            checkbox.checked = !!circles[key]

            checkbox.addEventListener('change', function () {
              if (checkbox.checked) {
                if (!circles[key]) {
                  circles[key] = L.circle([lat, lon], {
                    radius: 5000,
                    color: 'green',
                    fillColor: 'blue',
                    fillOpacity: 0.1
                  }).addTo(map)
                }
              } else {
                if (circles[key]) {
                  map.removeLayer(circles[key])
                  delete circles[key]
                }
              }
            })
          }, 100)
        })
        document.getElementById('msg').innerHTML = ''
      }
      console.log('archive points', archivePoints)
      toggleButtons()
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω–æ–π —Ç–æ—á–∫–∏:', error)
      document.getElementById('msg').innerHTML = '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
    })
  addGPXControl(archivePoints, 'history')
}

function setRangColor (rang) {
  if (!rang) {
    return 'rgb(84,84,243)'
  }
  if (rang === '–õ–∞–π—Ç') {
    return 'rgb(26,165,45)'
  } else {
    return 'rgb(241,5,5)'
  }
}

function addScreenBlinkEffect () {
  const overlay = document.getElementById('screen-overlay')
  if (!overlay) {
    console.error('–≠–ª–µ–º–µ–Ω—Ç #screen-overlay –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    return
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ –≤–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
  overlay.style.display = 'block'
  overlay.style.animation = 'screen-blink 1s linear 3' // 3 —Ü–∏–∫–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ (1 —Å–µ–∫—É–Ω–¥–∞ –∫–∞–∂–¥—ã–π)

  // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    overlay.style.animation = ''
    overlay.style.display = 'none'
  }, 3000)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–¥–∏—É—Å–µ 30 –º–µ—Ç—Ä–æ–≤ –æ—Ç —Ç–æ—á–∫–∏
function isWithinRadius (userLat, userLng, markerLat, markerLng, radiusInMeters) {
  const earthRadius = 6371000 // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const dLat = (markerLat - userLat) * Math.PI / 180
  const dLng = (markerLng - userLng) * Math.PI / 180

  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(userLat * Math.PI / 180) * Math.cos(markerLat * Math.PI / 180) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2)

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
  const distance = earthRadius * c

  return distance <= radiusInMeters
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
navigator.geolocation.watchPosition(
  position => {
    const userLat = position.coords.latitude
    const userLng = position.coords.longitude

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 300 –º
    for (const marker of markers) {
      const markerLat = marker._latlng[0]
      const markerLng = marker._latlng[1]
      const distance = calculateDistance(userLat, userLng, markerLat, markerLng)

      if (distance <= 300) {
        if (!activePoint || activePoint.lat !== markerLat || activePoint.lng !== markerLng) {
          // –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤ –∑–æ–Ω–µ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω
          activePoint = { lat: markerLat, lng: markerLng }
          document.getElementById('bg-text').style.display = 'block'
        }
        updateDistance(userLat, userLng) // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        return
      }
      if (distance <= 30) {
        if (!playedSounds.has(marker)) {
          playSound()
          addScreenBlinkEffect()
          playedSounds.add(marker) // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–≤—É–∫ –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏ —É–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω
        }
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∑–æ–Ω—ã 100 –º
    activePoint = null
    document.getElementById('bg-text').style.display = 'none'
  },
  error => {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: ', error.message)
  },
  { enableHighAccuracy: true }
)

let activePoint = null

function updateDistance (userLat, userLng) {
  if (!activePoint) return

  const distance = calculateDistance(userLat, userLng, activePoint.lat, activePoint.lng)

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  const overlayText = document.getElementById('overlay-text')
  if (overlayText) {
    overlayText.textContent = `–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏: ${Math.round(distance)} –º`
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–≤ –º–µ—Ç—Ä–∞—Ö)
function calculateDistance (lat1, lng1, lat2, lng2) {
  const earthRadius = 6371000 // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const dLat = (lat2 - lat1) * Math.PI / 180
  const dLng = (lng2 - lng1) * Math.PI / 180

  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2)

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
  return earthRadius * c
}

document.getElementById('playSoundButton').addEventListener('click', () => {
  playSound()
  addScreenBlinkEffect()
})

document.getElementById('showHistory').addEventListener('click', () => {
  getHistoryPoints()
})
